{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Matheart's Note ! \u00b6 site.info Post note about cs & math stuff ~ and also some random things maybe \u53ef\u80fd\u6703\u96a8\u6211\u7684\u7fd2\u6163\u51fa\u73fe\u4e2d\u82f1\u593e\u96dc\uff0c\u751a\u81f3\u7c21\u7e41\u593e\u96dc\u7684\u60c5\u6cc1\uff0c\u53cd\u6b63\u4e5f\u53ea\u662f\u70ba\u4e86\u6211\u81ea\u5df1\u770b\u8457(&\u5beb\u8457)\u8212\u670d about(site.author) HKUST CS & Math 25' HKUST Freshman 2021 Server Owner B\u7ad9\u4e0d\u77e5\u540d\u77e5\u8bc6\u533aUP\u4e3b A-SOUL\u4e94\u4eba\u56e2\u7c89 + 3u Table of Contents \u00b6 Computer Science Machine Learning (TO-DO) Computer Architecture (TO-DO) Programming Languages Rust Algorithms (TO-DO) Markdown Mathematics","title":"Welcome to Matheart's Note !"},{"location":"#welcome-to-mathearts-note","text":"site.info Post note about cs & math stuff ~ and also some random things maybe \u53ef\u80fd\u6703\u96a8\u6211\u7684\u7fd2\u6163\u51fa\u73fe\u4e2d\u82f1\u593e\u96dc\uff0c\u751a\u81f3\u7c21\u7e41\u593e\u96dc\u7684\u60c5\u6cc1\uff0c\u53cd\u6b63\u4e5f\u53ea\u662f\u70ba\u4e86\u6211\u81ea\u5df1\u770b\u8457(&\u5beb\u8457)\u8212\u670d about(site.author) HKUST CS & Math 25' HKUST Freshman 2021 Server Owner B\u7ad9\u4e0d\u77e5\u540d\u77e5\u8bc6\u533aUP\u4e3b A-SOUL\u4e94\u4eba\u56e2\u7c89 + 3u","title":"Welcome to Matheart's Note !"},{"location":"#table-of-contents","text":"Computer Science Machine Learning (TO-DO) Computer Architecture (TO-DO) Programming Languages Rust Algorithms (TO-DO) Markdown Mathematics","title":"Table of Contents"},{"location":"asoul/","text":"\u4e8c\u521b\u72e9\u730e \u00b6","title":"\u4e8c\u521b\u72e9\u730e"},{"location":"asoul/#_1","text":"","title":"\u4e8c\u521b\u72e9\u730e"},{"location":"cs/","text":"Computer Science \u00b6 Warning The code is written under Mac environment. Please note that this note is only for recording what I have learnt so far, so they are for reference only and not 100% correct. Feel free to contact me if you got any questions. Table of Contents \u00b6 Machine Learning Computer Architecture Programming Languages Rust Algorithms Markdown","title":"Computer Science"},{"location":"cs/#computer-science","text":"Warning The code is written under Mac environment. Please note that this note is only for recording what I have learnt so far, so they are for reference only and not 100% correct. Feel free to contact me if you got any questions.","title":"Computer Science"},{"location":"cs/#table-of-contents","text":"Machine Learning Computer Architecture Programming Languages Rust Algorithms Markdown","title":"Table of Contents"},{"location":"cs/algo/","text":"Algorithm \u00b6 To be implemented in 2023 Spring when I will be taking the COMP3711 course.","title":"Algorithm"},{"location":"cs/algo/#algorithm","text":"To be implemented in 2023 Spring when I will be taking the COMP3711 course.","title":"Algorithm"},{"location":"cs/archi/","text":"Computer Architecture \u00b6 To be implemented in 2022 Fall when I will be taking COMP2611.","title":"Computer Architecture"},{"location":"cs/archi/#computer-architecture","text":"To be implemented in 2022 Fall when I will be taking COMP2611.","title":"Computer Architecture"},{"location":"cs/markdown/","text":"Markdown \u00b6 First Paragraph \u00b6 Info This place is reserved for self-studying markdown syntax. Debug bruh Help bruh Solution bruh Notice bruh Abstract bruh Language English Mandarin Cantonese 1 Why \u4e3a\u4ec0\u4e48 \u9ede\u89e3 2 good morning \u65e9\u4e0a\u597d \u65e9\u6668 C++ int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ); } Python for i in range ( 100 ): np . sum ( a [ i ], axis = 0 ) Rust fn makes_copy ( some_integer : i32 ) { // some_integer comes into scope println! ( \"{}\" , some_integer ); } \u6e90\u7801\uff1a ridiculousfish/cdecl-blocks a b c d","title":"Markdown"},{"location":"cs/markdown/#markdown","text":"","title":"Markdown"},{"location":"cs/markdown/#first-paragraph","text":"Info This place is reserved for self-studying markdown syntax. Debug bruh Help bruh Solution bruh Notice bruh Abstract bruh Language English Mandarin Cantonese 1 Why \u4e3a\u4ec0\u4e48 \u9ede\u89e3 2 good morning \u65e9\u4e0a\u597d \u65e9\u6668 C++ int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ); } Python for i in range ( 100 ): np . sum ( a [ i ], axis = 0 ) Rust fn makes_copy ( some_integer : i32 ) { // some_integer comes into scope println! ( \"{}\" , some_integer ); } \u6e90\u7801\uff1a ridiculousfish/cdecl-blocks a b c d","title":"First Paragraph"},{"location":"cs/ml/","text":"Machine Learning \u00b6 To be implemented when I will be taking the statistical machine learning course MATH4432.","title":"Machine Learning"},{"location":"cs/ml/#machine-learning","text":"To be implemented when I will be taking the statistical machine learning course MATH4432.","title":"Machine Learning"},{"location":"cs/pl/","text":"Programming Languages \u00b6 Table of Contents \u00b6 Rust The Proramming Paradigms \u00b6","title":"Programming Languages"},{"location":"cs/pl/#programming-languages","text":"","title":"Programming Languages"},{"location":"cs/pl/#table-of-contents","text":"Rust","title":"Table of Contents"},{"location":"cs/pl/#the-proramming-paradigms","text":"","title":"The Proramming Paradigms"},{"location":"cs/pl/rust/","text":"Rust \u00b6 Abstract Rust is a statically typed language so it must know the types of all variables at compile time. It can give very powerful static checking during compilation and can help you eliminate most of the errors before actually running the code. The language does not have a GC (Garbage Collector) but acheieve the purposes by the unique concepts called ownership and lifetime . Many of the examples and sentences here are directly adopted from The Rust Programming Language . Basics \u00b6 Compile and Run a single file \u00b6 When there's only one file, we can use rustc main.rs to compile (just like javac in Java ) and then use ./main.rs to run it. Compile and Run a project \u00b6 Cargo is the powerful package manager of Rust. It is easy to use, only several commands can satisfy most of the daily usage. Useful Commands \u00b6 Create a new project $ cargo new hello_cargo Build (compile) the project $ cargo build Compile and Run the project $ cargo run Hello World Program \u00b6 fn main () { println! ( \"Hello, world!\" ); } As you can see, the syntax here is quite similar to C/C++, there are some differences though. fn here refers to function, and also ! is added behind println as println in Rust is a macro. (The meaning of macro would be introduced later). Variables and Mutability \u00b6 we use let to define new variables, and we call this kind of value assignment as variable binding . Like in C++ there are variables and constants, in Scala there are var and val , we have mutable and immutable variables in Rust as well , but the variables are by default immutable as immutability has a lot of advantages (check Wikipedia page for detailed explanations). To make the variable mutable, we should add the keyword mut at the beginning. let x = 5 ; let mut y = 6 ; const THREE_HOURS_IN_SECONDS : u32 = 60 * 60 * 3 ; Notice However, note that constants and immutable variables are different. The naming convention for constants is using all upper cases. Constants are valid for the entire time when a program runs, within the scope they were declared in. Also, constants can only be set to a constant expression, not the result of a value that could only be computed during runtime. We can declare a new variable with the same name as previous variable and we call this kind of operation as shadowing . let y = 5 ; let y = y + 1 ; { let y = y * 2 ; println! ( \"The value of y in the inner scope is: {y}\" ); } Like this one, we first initialize the immutable variable y by binding 5 to it. Then we shadow y by y + 1 . Inside the curly brackets, we shadow y again, when the scope is over, the inner shadowing ends. So the output value should be 6. The following code can run smoothly: let spaces = \" \" ; spaces = spaces . len (); However, if we add mut to spaces . It would pop out errors because the compiler perceives it as mutating the type of the variable instead of shadowing, which is not allowed. Data Type \u00b6 As shown previously, we don't always need to write out the type explicitly ( let y = 5; ) unless the compiler requires more about the type information of the variable. If doing so, it would be like: let y: i32 = 5; , it is called type annotation . There are two data type subsets, namely Scalar Types and Compound Types . Scalar Type \u00b6 Integer Type \u00b6 u32 is one of the integer types, where u refers to unsigned, 32 refers to the number of bits. Similarly, there are i32 , u16 , u32 , i128 , ... By basic CS knowledge, it is trivial to calculate the range of each type. The isize and usize types depend on the architecture of the computer your program is running on, which is denoted in the table as \u201carch\u201d: 64 bits if you\u2019re on a 64-bit architecture and 32 bits if you\u2019re on a 32-bit architecture. We can call the functions usize::MIN , usize::MAX , isize::MIN , isize::MAX . The number literals can be represented under different basis. For example: 0xff , 0o77 , 0b1100_0100 , b'A' , 345_678 etc. One of the unique features of Rust is that it can insert _ inside the numbers to improve the readability like the binary number given above. We still need to handle the integer overflow issue in Rust. Wrap in all modes with the wrapping_* methods, such as wrapping_add Return the None value if there is overflow with the checked_* methods Return the value and a boolean indicating whether there was overflow with the overflowing_* methods Saturate at the value\u2019s minimum or maximum values with saturating_* methods let of_x : u8 = 233 ; let of_y : u8 = 133 ; of_x . wrapping_add ( of_y ); // 110 of_x . checked_add ( of_y ); // None of_x . overflowing_add ( of_y ). 1 ; // true of_x . saturating_add ( of_y )); // 255 Floating-point Type \u00b6 Only f32 and f64 . The boolean type and char type are similiar to C/C++. Compound Type \u00b6 Tuple Type \u00b6 Tuple has fixed length but allows its elements to have different types. Array Type \u00b6 String Type \u00b6","title":"Rust"},{"location":"cs/pl/rust/#rust","text":"Abstract Rust is a statically typed language so it must know the types of all variables at compile time. It can give very powerful static checking during compilation and can help you eliminate most of the errors before actually running the code. The language does not have a GC (Garbage Collector) but acheieve the purposes by the unique concepts called ownership and lifetime . Many of the examples and sentences here are directly adopted from The Rust Programming Language .","title":"Rust"},{"location":"cs/pl/rust/#basics","text":"","title":"Basics"},{"location":"cs/pl/rust/#compile-and-run-a-single-file","text":"When there's only one file, we can use rustc main.rs to compile (just like javac in Java ) and then use ./main.rs to run it.","title":"Compile and Run a single file"},{"location":"cs/pl/rust/#compile-and-run-a-project","text":"Cargo is the powerful package manager of Rust. It is easy to use, only several commands can satisfy most of the daily usage.","title":"Compile and Run a project"},{"location":"cs/pl/rust/#useful-commands","text":"Create a new project $ cargo new hello_cargo Build (compile) the project $ cargo build Compile and Run the project $ cargo run","title":"Useful Commands"},{"location":"cs/pl/rust/#hello-world-program","text":"fn main () { println! ( \"Hello, world!\" ); } As you can see, the syntax here is quite similar to C/C++, there are some differences though. fn here refers to function, and also ! is added behind println as println in Rust is a macro. (The meaning of macro would be introduced later).","title":"Hello World Program"},{"location":"cs/pl/rust/#variables-and-mutability","text":"we use let to define new variables, and we call this kind of value assignment as variable binding . Like in C++ there are variables and constants, in Scala there are var and val , we have mutable and immutable variables in Rust as well , but the variables are by default immutable as immutability has a lot of advantages (check Wikipedia page for detailed explanations). To make the variable mutable, we should add the keyword mut at the beginning. let x = 5 ; let mut y = 6 ; const THREE_HOURS_IN_SECONDS : u32 = 60 * 60 * 3 ; Notice However, note that constants and immutable variables are different. The naming convention for constants is using all upper cases. Constants are valid for the entire time when a program runs, within the scope they were declared in. Also, constants can only be set to a constant expression, not the result of a value that could only be computed during runtime. We can declare a new variable with the same name as previous variable and we call this kind of operation as shadowing . let y = 5 ; let y = y + 1 ; { let y = y * 2 ; println! ( \"The value of y in the inner scope is: {y}\" ); } Like this one, we first initialize the immutable variable y by binding 5 to it. Then we shadow y by y + 1 . Inside the curly brackets, we shadow y again, when the scope is over, the inner shadowing ends. So the output value should be 6. The following code can run smoothly: let spaces = \" \" ; spaces = spaces . len (); However, if we add mut to spaces . It would pop out errors because the compiler perceives it as mutating the type of the variable instead of shadowing, which is not allowed.","title":"Variables and Mutability"},{"location":"cs/pl/rust/#data-type","text":"As shown previously, we don't always need to write out the type explicitly ( let y = 5; ) unless the compiler requires more about the type information of the variable. If doing so, it would be like: let y: i32 = 5; , it is called type annotation . There are two data type subsets, namely Scalar Types and Compound Types .","title":"Data Type"},{"location":"cs/pl/rust/#scalar-type","text":"","title":"Scalar Type"},{"location":"cs/pl/rust/#compound-type","text":"","title":"Compound Type"},{"location":"math/","text":"Mathematics \u00b6","title":"Mathematics"},{"location":"math/#mathematics","text":"","title":"Mathematics"}]}